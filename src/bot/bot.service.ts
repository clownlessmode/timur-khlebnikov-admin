import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { EntityManager } from 'typeorm';
import { AuthService } from 'src/auth/auth.service';
import { UsersService } from 'src/users/users.service';
import escapeMessage from 'common/utils/escape-message';
import { Ctx, On, Start, Update } from 'nestjs-telegraf';
import { Context, Markup, Telegraf } from 'telegraf';
import * as path from 'path';
import * as fs from 'fs';
import WelcomeMessage from './assets/welcome-message';
import { User } from 'src/users/entities/user.entity';
import ChatMessage from './assets/chat-message';
import { Message } from 'telegraf/typings/core/types/typegram';
import { RegisterDto } from 'src/auth/dto/register.dto';
import { MessagesService } from 'src/messages/messages.service';
import { MessagesGateway } from 'src/messages/messages.gateway';
import Variant from 'src/messages/entities/variant.enum';
import generateName from 'common/utils/generate-name';

@Update()
@Injectable()
export class BotService {
  private readonly logger = new Logger(BotService.name);
  private readonly bot: Telegraf;
  private readonly adminBot: Telegraf;
  private readonly adminId: string;

  constructor(
    private usersService: UsersService,
    private manager: EntityManager,
    private messagesService: MessagesService,
    private authService: AuthService,
    private configService: ConfigService,
    private messagesGateway: MessagesGateway,
  ) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
    this.bot = new Telegraf(
      configService.getOrThrow<string>('TELEGRAM_BOT_TOKEN'),
    );
    this.adminBot = new Telegraf(
      configService.getOrThrow<string>('TELEGRAM_ADMIN_TOKEN'),
    );
    this.adminId = configService.getOrThrow<string>('TELEGRAM_ADMIN_ID');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    this.initAdminBotHandlers();
    this.adminBot.launch();
  }

  // --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è adminBot ---
  private initAdminBotHandlers() {
    this.adminBot.on('message', async (ctx) => {
      const chatId = ctx.chat.id;
      this.logger.log(`AdminBot received message from chat ID: ${chatId}`);
      await ctx.reply(`–í–∞—à Chat ID: ${chatId}`);
    });
  }

  // --- 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ ---
  @On('contact')
  async contact(@Ctx() ctx: Context) {
    const contact = (ctx.message as Message.ContactMessage).contact;

    if (contact) {
      this.logger.log(`–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: ${JSON.stringify(contact)}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await ctx.reply(
        `–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ! üòä`,
      );

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const user = ctx.from;
      const adminMessage = `
üìû *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å!*

üë§ *–ò–º—è*: ${contact.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ${contact.last_name || ''}
üì± *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*: ${contact.phone_number}
üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: @${user.username || '–ù–µ—Ç username'}
`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
      await this.adminBot.telegram.sendMessage(
        this.adminId,
        escapeMessage(adminMessage),
        {
          parse_mode: 'MarkdownV2',
          ...Markup.inlineKeyboard([
            [
              Markup.button.url(
                '–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram',
                `tg://user?id=${user.id}`,
              ),
            ],
          ]),
        },
      );
    } else {
      this.logger.warn('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.');
      await ctx.reply(
        escapeMessage(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.`),
      );
    }
  }
  @Start()
  async start(@Ctx() ctx: Context) {
    await this.sendWelcomeVideo(ctx);
    await this.sendWelcomeMessage(ctx);

    try {
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.authService.register(ctx.from);

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const user = ctx.from;
      const message = `
üéâ *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!*

üìá *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:*
- üÜî *ID*: ${user.id}
- ü§ñ *–ë–æ—Ç*: ${user.is_bot ? '–î–∞' : '–ù–µ—Ç'}
- üë§ *–ò–º—è*: ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- üåê *–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- üó£Ô∏è *–Ø–∑—ã–∫*: ${user.language_code || '–ù–µ —É–∫–∞–∑–∞–Ω'}
`;

      await this.adminBot.telegram.sendMessage(
        this.adminId,
        escapeMessage(message),
        {
          parse_mode: 'MarkdownV2',
          ...Markup.inlineKeyboard([
            [
              Markup.button.webApp(
                '–û—Ç–∫—Ä—ã—Ç—å –ê–¥–º–∏–Ω–∫—É üåê',
                'https://r6nt2plp-3000.asse.devtunnels.ms/',
              ),
            ],
          ]),
        },
      );

      setTimeout(async () => {
        try {
          await ctx.reply(escapeMessage(ChatMessage), {
            parse_mode: 'MarkdownV2',
            ...Markup.keyboard([
              Markup.button.contactRequest('üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º'),
            ])
              .oneTime()
              .resize(),
          });
        } catch (error) {
          this.logger.error(
            'Failed to send delayed message to user',
            error.stack,
          );
        }
      }, 1000); // 10 —Å–µ–∫—É–Ω–¥
    } catch (error) {
      this.logger.error('Failed to notify admin about new user', error.stack);
    }
  }

  // --- 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---
  private sendWelcomeMessage(ctx: Context) {
    return ctx.reply(escapeMessage(WelcomeMessage), {
      parse_mode: 'MarkdownV2',
      ...Markup.inlineKeyboard([
        [
          Markup.button.webApp(
            '–û—Ç–∫—Ä—ã—Ç—å –≤–∏–∑–∏—Ç–∫—É üåê',
            'https://khal-web-app.vercel.app/',
          ),
        ],
      ]),
    });
  }

  private sendWelcomeVideo(ctx: Context) {
    const videoPath = path.join(
      __dirname,
      '../../src/bot/assets/welcome-video.mp4',
    );
    const videoBuffer = fs.readFileSync(videoPath);

    return ctx.telegram.sendVideoNote(ctx.chat.id, {
      source: videoBuffer,
    } as any);
  }

  // --- 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
  async sendMessageToUser(
    user: User,
    message: string,
    imageUrl?: string, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  ): Promise<void> {
    try {
      if (user.telegram && user.telegram.telegram_id) {
        if (imageUrl) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
          await this.bot.telegram.sendPhoto(
            user.telegram.telegram_id,
            imageUrl,
            {
              caption: message, // –ò—Å–ø–æ–ª—å–∑—É–µ–º message –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å
            },
          );
          this.logger.log(
            `Photo with caption sent to user ${user.telegram.telegram_id}`,
          );
        } else {
          // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await this.bot.telegram.sendMessage(
            user.telegram.telegram_id,
            message,
          );
          this.logger.log(`Message sent to user ${user.telegram.telegram_id}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        user.hasBanned = false;
        await this.manager.save(User, user);
      } else {
        this.logger.warn(
          `User ${user.name || user.telegram.username} does not have a valid Telegram ID.`,
        );
      }
    } catch (error) {
      this.handleSendMessageError(user, error);
    }
  }

  private async handleSendMessageError(user: User, error: any) {
    if (error.response && error.response.error_code === 403) {
      // –û—à–∏–±–∫–∞ 403: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
      this.logger.warn(
        `User ${user.telegram.telegram_id} has blocked the bot.`,
      );
      user.hasBanned = true;
      await this.manager.save(User, user);
    } else {
      this.logger.error(
        `Failed to send message to user ${user.telegram.telegram_id}: ${error.message}`,
        error.stack,
      );
    }
  }

  async contactToUser(id: string): Promise<void> {
    const user = await this.manager.findOne(User, { where: { id } });

    if (!user || !user.telegram) {
      this.logger.error('User or telegram data is invalid');
      return;
    }

    const message = `
üì± *–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ª–∏—á–Ω–æ–π —Å–≤—è–∑–∏!* 

‚ú® *–ò–º—è*: ${user.name || user.telegram.first_name || user.telegram.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: @${user.telegram.username || '–ù–µ—Ç username'}
`;

    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ tg://user?id
      await this.adminBot.telegram.sendMessage(
        this.adminId,
        escapeMessage(message),
        {
          parse_mode: 'MarkdownV2',
          ...Markup.inlineKeyboard([
            [
              Markup.button.url(
                '–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram',
                `tg://user?id=${user.telegram.telegram_id}`,
              ),
            ],
          ]),
        },
      );
      this.logger.log('Message sent via tg://user');
    } catch (error) {
      this.logger.error(
        'Failed to send via tg://user, attempting with username link',
        error,
      );

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ username
      if (user.telegram.username) {
        try {
          await this.adminBot.telegram.sendMessage(
            this.adminId,
            escapeMessage(message),
            {
              parse_mode: 'MarkdownV2',
              ...Markup.inlineKeyboard([
                [
                  Markup.button.url(
                    '–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram',
                    `https://t.me/${user.telegram.username}`,
                  ),
                ],
              ]),
            },
          );
          this.logger.log('Message sent via t.me username');
        } catch (innerError) {
          this.logger.error(
            'Failed to send via t.me username as well',
            innerError,
          );
        }
      } else {
        this.logger.error('User has no username to fallback to');
      }
    }
  }

  @On('message')
  async handleMessage(@Ctx() ctx: Context) {
    const user = await this.usersService.findByTelegram(ctx.from.id);
    console.log(ctx.message);

    if ('text' in ctx.message) {
      console.log('trying to send message', user.id);

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const roomClients = await this.messagesGateway.server
        .in(user.id)
        .fetchSockets();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–∫–µ—Ç—ã –≤ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const isInRoom = roomClients.length > 0;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç—É
      await this.messagesGateway.server.to(user.id).emit('new', {
        id: user.id,
        message: ctx.message.text,
        variant: Variant.INCOMING,
        roomId: user.id,
      });

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.messagesService.create({
        content: ctx.message.text,
        variant: Variant.INCOMING,
        userId: user.id,
      });

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      if (!isInRoom) {
        const notifyAdmin = `‚úâÔ∏è –ù–æ–≤–æe —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${generateName({
          first_name: user.telegram.first_name,
          username: user.telegram.username,
          id: user.id,
          name: user.name,
        })}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç!`;
        const searchParams = new URLSearchParams({
          first_name: user.telegram.first_name || '',
          username: user.telegram.username || '',
          name: user.name || '',
          userId: user.id || '',
        }).toString();
        await this.adminBot.telegram.sendMessage(
          this.adminId,
          escapeMessage(notifyAdmin),
          {
            parse_mode: 'MarkdownV2',
            ...Markup.inlineKeyboard([
              [
                Markup.button.webApp(
                  '–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç',
                  `https://r6nt2plp-3000.asse.devtunnels.ms/chats/${user.id}?${searchParams}`,
                ),
              ],
            ]),
          },
        );
      }
    }
  }
}
